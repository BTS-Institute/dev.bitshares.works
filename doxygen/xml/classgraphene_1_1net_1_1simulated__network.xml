<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgraphene_1_1net_1_1simulated__network" kind="class" language="C++" prot="public">
    <compoundname>graphene::net::simulated_network</compoundname>
    <basecompoundref refid="classgraphene_1_1net_1_1node" prot="public" virt="non-virtual">graphene::net::node</basecompoundref>
    <includes refid="node_8hpp" local="no">node.hpp</includes>
    <innerclass refid="structgraphene_1_1net_1_1simulated__network_1_1node__info" prot="public">graphene::net::simulated_network::node_info</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1simulated__network_1ae30ffebc0175c953897ad35553052813" prot="private" static="no" mutable="no">
        <type>std::list&lt; <ref refid="structgraphene_1_1net_1_1simulated__network_1_1node__info" kindref="compound">node_info</ref> * &gt;</type>
        <definition>std::list&lt;node_info*&gt; graphene::net::simulated_network::network_nodes</definition>
        <argsstring></argsstring>
        <name>network_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="343" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="343" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1a42ad61d6c88d161a9b6e74489199e63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::net::simulated_network::~simulated_network</definition>
        <argsstring>()</argsstring>
        <name>~simulated_network</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="327" column="1" bodyfile="libraries/net/node.cpp" bodystart="5052" bodyend="5059"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1a5945099e871d1ccbe0b33542e55f8d44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::net::simulated_network::simulated_network</definition>
        <argsstring>(const std::string &amp;user_agent)</argsstring>
        <name>simulated_network</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>user_agent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="328" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1abd49f968a85f546eb974329cb6639b5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::simulated_network::listen_to_p2p_network</definition>
        <argsstring>() override</argsstring>
        <name>listen_to_p2p_network</name>
        <reimplements refid="classgraphene_1_1net_1_1node_1a6822a9703c8258b2f7fe6d931c1bcead">listen_to_p2p_network</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="329" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="329" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1a8cd109059d99e28c7a5d826d4ab7ba97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::simulated_network::connect_to_p2p_network</definition>
        <argsstring>() override</argsstring>
        <name>connect_to_p2p_network</name>
        <reimplements refid="classgraphene_1_1net_1_1node_1a9d0cfd3d3e9df5eb378f669c2637fc22">connect_to_p2p_network</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="330" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1a9bab8cb8ba69b7c8c3e4f0d4423b6af9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::simulated_network::connect_to_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep) override</argsstring>
        <name>connect_to_endpoint</name>
        <reimplements refid="classgraphene_1_1net_1_1node_1ab641ac0582547b4298468240d83835b5">connect_to_endpoint</reimplements>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempt to connect to the specified endpoint immediately. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="331" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1aeba9b595f3ef9f6e346d3610cc99b204" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref></type>
        <definition>fc::ip::endpoint graphene::net::simulated_network::get_actual_listening_endpoint</definition>
        <argsstring>() const override</argsstring>
        <name>get_actual_listening_endpoint</name>
        <reimplements refid="classgraphene_1_1net_1_1node_1ad5000684c60758c52e9fa62b27cb7782">get_actual_listening_endpoint</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the endpoint the node is listening on. This is usually the same as the value previously passed in to listen_on_endpoint, unless we were unable to bind to that port. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="333" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="333" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1a4d29256dfb72cac5193da142f1592d16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::simulated_network::sync_from</definition>
        <argsstring>(const item_id &amp;current_head_block, const std::vector&lt; uint32_t &gt; &amp;hard_fork_block_numbers) override</argsstring>
        <name>sync_from</name>
        <reimplements refid="classgraphene_1_1net_1_1node_1a66366a86787aad2a1062b96da4e2555a">sync_from</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> &amp;</type>
          <declname>current_head_block</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>hard_fork_block_numbers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Node starts the process of fetching all items after <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> of the given item_type. During this process messages are not broadcast. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="335" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1ae005a0f7423959e098c534c88c7c18c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::simulated_network::broadcast</definition>
        <argsstring>(const message &amp;item_to_broadcast) override</argsstring>
        <name>broadcast</name>
        <reimplements refid="classgraphene_1_1net_1_1node_1aa6d4b416eeaf02adb40f698a60649935">broadcast</reimplements>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>item_to_broadcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add message to outgoing inventory list, notify peers that I have a message ready. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="336" column="1" bodyfile="libraries/net/node.cpp" bodystart="5086" bodyend="5094"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1aec6e20b3b32c8d0e7ea1c70d8e19b042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::simulated_network::add_node_delegate</definition>
        <argsstring>(node_delegate *node_delegate_to_add)</argsstring>
        <name>add_node_delegate</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1node__delegate" kindref="compound">node_delegate</ref> *</type>
          <declname>node_delegate_to_add</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="337" column="1" bodyfile="libraries/net/node.cpp" bodystart="5096" bodyend="5099"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1a8b612cc3a5d5fd840038f3f40b67774b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t graphene::net::simulated_network::get_connection_count</definition>
        <argsstring>() const override</argsstring>
        <name>get_connection_count</name>
        <reimplements refid="classgraphene_1_1net_1_1node_1a71b877e67bd290c9a883c77504b6f6c5">get_connection_count</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the number of peers we&apos;re actively connected to </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="339" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="339" bodyend="339"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgraphene_1_1net_1_1simulated__network_1a931d10145b20ebd2012feaf2a2bf3380" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::simulated_network::message_sender</definition>
        <argsstring>(node_info *destination_node)</argsstring>
        <name>message_sender</name>
        <param>
          <type><ref refid="structgraphene_1_1net_1_1simulated__network_1_1node__info" kindref="compound">node_info</ref> *</type>
          <declname>destination_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="342" column="1" bodyfile="libraries/net/node.cpp" bodystart="5061" bodyend="5084"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6165">
        <label>graphene::net::node</label>
        <link refid="classgraphene_1_1net_1_1node"/>
        <childnode refid="6166" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6164">
        <label>graphene::net::simulated_network</label>
        <link refid="classgraphene_1_1net_1_1simulated__network"/>
        <childnode refid="6165" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6166">
        <label>std::enable_shared_from_this&lt; node &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6168">
        <label>graphene::net::node</label>
        <link refid="classgraphene_1_1net_1_1node"/>
        <childnode refid="6169" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6167">
        <label>graphene::net::simulated_network</label>
        <link refid="classgraphene_1_1net_1_1simulated__network"/>
        <childnode refid="6168" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6169">
        <label>std::enable_shared_from_this&lt; node &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libraries/net/include/graphene/net/node.hpp" line="325" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="324" bodyend="344"/>
    <listofallmembers>
      <member refid="classgraphene_1_1net_1_1node_1ae99e0aa1005c9191147def9f7b1ceaa7" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>accept_incoming_connections</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a1c9efd12182200c318357c0e4b169cb9" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>add_node</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1aec6e20b3b32c8d0e7ea1c70d8e19b042" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>add_node_delegate</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a05a64465adb288eb86ae1807ec7bd121" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>add_seed_node</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a86172b9ef82a87c798737aa8ca0eaea3" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>add_seed_nodes</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1ae005a0f7423959e098c534c88c7c18c1" prot="public" virt="virtual"><scope>graphene::net::simulated_network</scope><name>broadcast</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a7db82bafe2fee73c4c81ebc2253f792d" prot="public" virt="virtual"><scope>graphene::net::simulated_network</scope><name>broadcast_transaction</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a7e4b8fdf179a0bfc9a3046765e1faa4b" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>clear_peer_database</name></member>
      <member refid="classgraphene_1_1net_1_1node_1ac4c9d53582644a76d462f2b9dfbcc778" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>close</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1a9bab8cb8ba69b7c8c3e4f0d4423b6af9" prot="public" virt="virtual"><scope>graphene::net::simulated_network</scope><name>connect_to_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1a8cd109059d99e28c7a5d826d4ab7ba97" prot="public" virt="virtual"><scope>graphene::net::simulated_network</scope><name>connect_to_p2p_network</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a25635e6a2b617401cb97dd9e036f9a6d" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>disable_peer_advertising</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1aeba9b595f3ef9f6e346d3610cc99b204" prot="public" virt="virtual"><scope>graphene::net::simulated_network</scope><name>get_actual_listening_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a18405cc828426c5f8d5055dd9fa5fee8" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>get_advanced_node_parameters</name></member>
      <member refid="classgraphene_1_1net_1_1node_1acbd7f4c3a06ff7f8e3ddd94ca8ffcaaf" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>get_block_propagation_data</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a140d6c1fa9c18ae8a8dc0844bf2cbad1" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>get_call_statistics</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a911b9dd90b267c10b7ca21dab58012fd" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>get_connected_peers</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1a8b612cc3a5d5fd840038f3f40b67774b" prot="public" virt="virtual"><scope>graphene::net::simulated_network</scope><name>get_connection_count</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a6f4d7c3e6e4bc7318e57f623e171d735" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>get_node_id</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a3e5b74ba62074ac0a67005c967ad90e6" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>get_potential_peers</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a23db84dfcabfef26f118224ee5b197bc" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>get_transaction_propagation_data</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a27168d37cf2e4cef2aed02e279c0a2a1" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>is_connected</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a991b591d1102f031ed697e6097881e4b" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>listen_on_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1node_1aa6b28ef513b383b9f7138667b02184f1" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>listen_on_port</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1abd49f968a85f546eb974329cb6639b5f" prot="public" virt="virtual"><scope>graphene::net::simulated_network</scope><name>listen_to_p2p_network</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a682fe5c9d092497c926896589238d7f4" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>load_configuration</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1a931d10145b20ebd2012feaf2a2bf3380" prot="private" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>message_sender</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a8b730d91c0da4716b8e46b518b0224cb" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>network_get_info</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a0133caf9a68c2cc026f3bcc599ebd30d" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>network_get_usage_stats</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1ae30ffebc0175c953897ad35553052813" prot="private" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>network_nodes</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a2c669ad34653238449e0dc0f33319281" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>node</name></member>
      <member refid="classgraphene_1_1net_1_1node_1af09472fa1a74d277a959ae21548a7de4" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>resolve_string_to_ip_endpoints</name></member>
      <member refid="classgraphene_1_1net_1_1node_1aefc421924f961065944cac2217e7934e" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>set_advanced_node_parameters</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a8e1af7fa5454cd1e0d8b44535780c4d4" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>set_allowed_peers</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a071fd9b43eb2b4adccca649edba6b311" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>set_node_delegate</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a9e89f58289f44789f8e8bb6157a6f98b" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>set_total_bandwidth_limit</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1a5945099e871d1ccbe0b33542e55f8d44" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>simulated_network</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1a4d29256dfb72cac5193da142f1592d16" prot="public" virt="virtual"><scope>graphene::net::simulated_network</scope><name>sync_from</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a4123cfc1660d19fe6c48a468d8daced0" prot="public" virt="virtual"><scope>graphene::net::simulated_network</scope><name>~node</name></member>
      <member refid="classgraphene_1_1net_1_1simulated__network_1a42ad61d6c88d161a9b6e74489199e63d" prot="public" virt="non-virtual"><scope>graphene::net::simulated_network</scope><name>~simulated_network</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
