<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structgraphene_1_1protocol_1_1fee__schedule" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::fee_schedule</compoundname>
    <includes refid="fee__schedule_8hpp" local="no">fee_schedule.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1fee__schedule_1a6f2090295067b50ecd5a75fdd1a67c17" prot="public" static="no" mutable="no">
        <type>fee_parameters::flat_set_type</type>
        <definition>fee_parameters::flat_set_type graphene::protocol::fee_schedule::parameters</definition>
        <argsstring></argsstring>
        <name>parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>must be sorted by fee_parameters.which() and have no duplicates </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="222" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1fee__schedule_1ae12915cb45122c62dd7071a112269c26" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t graphene::protocol::fee_schedule::scale</definition>
        <argsstring></argsstring>
        <name>scale</name>
        <initializer>= <ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1af5f2c9a6e3c5d50383888931f500eaea" kindref="member">GRAPHENE_100_PERCENT</ref></initializer>
        <briefdescription>
<para>fee * scale / GRAPHENE_100_PERCENT </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="223" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1aa8b1729f8d71016692e87f1388a4bfe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::fee_schedule::fee_schedule</definition>
        <argsstring>()</argsstring>
        <name>fee_schedule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="175" column="1" bodyfile="libraries/protocol/fee_schedule.cpp" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1a3df33bb110c80dae533045caf4a1b7f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::fee_schedule::calculate_fee</definition>
        <argsstring>(const operation &amp;op) const </argsstring>
        <name>calculate_fee</name>
        <param>
          <type>const <ref refid="group__operations_1gadd00b6b45ba587b94dba2c8ec1d129a0" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the appropriate fee parameter struct for the operation and then calculates the appropriate fee in CORE asset. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="183" column="1" bodyfile="libraries/protocol/fee_schedule_calc.cpp" bodystart="79" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1a53132b87b240d59a3cc30a94ff63fdae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::fee_schedule::calculate_fee</definition>
        <argsstring>(const operation &amp;op, const price &amp;core_exchange_rate) const </argsstring>
        <name>calculate_fee</name>
        <param>
          <type>const <ref refid="group__operations_1gadd00b6b45ba587b94dba2c8ec1d129a0" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>core_exchange_rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the appropriate fee parameter struct for the operation and then calculates the appropriate fee in an asset specified implicitly by core_exchange_rate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="189" column="1" bodyfile="libraries/protocol/fee_schedule_calc.cpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1ab18626c8a5fa7b70c03e0751e20e008c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::fee_schedule::set_fee</definition>
        <argsstring>(operation &amp;op, const price &amp;core_exchange_rate=price::unit_price()) const </argsstring>
        <name>set_fee</name>
        <param>
          <type><ref refid="group__operations_1gadd00b6b45ba587b94dba2c8ec1d129a0" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>core_exchange_rate</declname>
          <defval><ref refid="structgraphene_1_1protocol_1_1price_1af7da4b4f58613cb400bfe587232e091f" kindref="member">price::unit_price</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates the operation with appropriate fee and returns the fee. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="193" column="1" bodyfile="libraries/protocol/fee_schedule.cpp" bodystart="81" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1a663f3793b8df54ed1c9d629e3205b8da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::fee_schedule::zero_all_fees</definition>
        <argsstring>()</argsstring>
        <name>zero_all_fees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="195" column="1" bodyfile="libraries/protocol/fee_schedule.cpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1a3d82a2bde0a3cdd5938d9e300428492d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::fee_schedule::validate</definition>
        <argsstring>() const </argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validates all of the parameters are present and accounted for. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="200" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1acdc93682c4bc84d714c48b7f9df43437" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Operation</type>
          </param>
        </templateparamlist>
        <type>const Operation::fee_parameters_type &amp;</type>
        <definition>const Operation::fee_parameters_type&amp; graphene::protocol::fee_schedule::get</definition>
        <argsstring>() const </argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="203" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1af417f87b21ec7b2c95e74a74476788ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Operation</type>
          </param>
        </templateparamlist>
        <type>Operation::fee_parameters_type &amp;</type>
        <definition>Operation::fee_parameters_type&amp; graphene::protocol::fee_schedule::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="208" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1a70847bc31d86711d116573332e60940a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Operation</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool graphene::protocol::fee_schedule::exists</definition>
        <argsstring>() const </argsstring>
        <name>exists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="213" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="213" bodyend="217"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1a4ac42fef7ee8afb22d694eccf396abfb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1fee__schedule" kindref="compound">fee_schedule</ref></type>
        <definition>fee_schedule graphene::protocol::fee_schedule::get_default</definition>
        <argsstring>()</argsstring>
        <name>get_default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="177" column="1" bodyfile="libraries/protocol/fee_schedule.cpp" bodystart="37" bodyend="46"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1fee__schedule_1ac73c8278f2023211e4fc01c2557b6ac6" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void graphene::protocol::fee_schedule::set_fee_parameters</definition>
        <argsstring>(fee_schedule &amp;sched)</argsstring>
        <name>set_fee_parameters</name>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1fee__schedule" kindref="compound">fee_schedule</ref> &amp;</type>
          <declname>sched</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="225" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>contains all of the parameters necessary to calculate the fee for any operation </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="174" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="173" bodyend="226"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1a3df33bb110c80dae533045caf4a1b7f7" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1a53132b87b240d59a3cc30a94ff63fdae" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1a70847bc31d86711d116573332e60940a" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>exists</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1aa8b1729f8d71016692e87f1388a4bfe0" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>fee_schedule</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1acdc93682c4bc84d714c48b7f9df43437" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>get</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1af417f87b21ec7b2c95e74a74476788ae" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>get</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1a4ac42fef7ee8afb22d694eccf396abfb" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>get_default</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1a6f2090295067b50ecd5a75fdd1a67c17" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>parameters</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1ae12915cb45122c62dd7071a112269c26" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>scale</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1ab18626c8a5fa7b70c03e0751e20e008c" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>set_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1ac73c8278f2023211e4fc01c2557b6ac6" prot="private" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>set_fee_parameters</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1a3d82a2bde0a3cdd5938d9e300428492d" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>validate</name></member>
      <member refid="structgraphene_1_1protocol_1_1fee__schedule_1a663f3793b8df54ed1c9d629e3205b8da" prot="public" virt="non-virtual"><scope>graphene::protocol::fee_schedule</scope><name>zero_all_fees</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
